// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  role     Role   @default(ADMIN)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

// model Event {
//   id Int @id @default(autoincrement())

//   slug        String   @unique
//   title       String
//   description String
//   date        String
//   imagesPath  String[] @map("images_path")

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("events")
// }

model Employee {
  id Int @id @default(autoincrement())

  firstName   String @map("first_name")
  secondName  String @map("second_name")
  photoPath   String @map("photo_path")
  information String
  slug        String @unique

  competencies EmployeesOnCompetencies[]
  developments EmployeesOnDevelopment[]
  // courses      EmployeesOnCourses[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("employees")
}

model Competence {
  id Int @id @default(autoincrement())

  title       String
  description String
  imagesPath  String[] @map("images_path")
  slug        String   @unique

  employees    EmployeesOnCompetencies[]
  developments CompetenciesOnDevelopment[]
  // courses      CoursesCompetencies[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("competencies")
}

model EmployeesOnCompetencies {
  employee     Employee   @relation(fields: [employeeId], references: [id])
  employeeId   Int        @map("employee_id")
  competence   Competence @relation(fields: [competenceId], references: [id])
  competenceId Int        @map("competence_id")

  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([employeeId, competenceId])
  @@map("empoyees_on_competencies")
}

model EmployeesOnDevelopment {
  employee      Employee    @relation(fields: [employeeId], references: [id])
  employeeId    Int         @map("employee_id")
  development   Development @relation(fields: [developmentId], references: [id])
  developmentId Int         @map("development_id")

  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([employeeId, developmentId])
  @@map("employees_on_development")
}

model Development {
  id Int @id @default(autoincrement())

  title          String
  description    String
  technicalStats String[] @map("technical_stats")
  slug           String   @unique
  imagesPath     String[] @map("images_path")
  productionDate String   @map("production_date")
  status         Boolean

  competencies CompetenciesOnDevelopment[]
  employees    EmployeesOnDevelopment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("developments")
}

model CompetenciesOnDevelopment {
  competence    Competence  @relation(fields: [competenceId], references: [id])
  competenceId  Int         @map("competence_id")
  development   Development @relation(fields: [developmentId], references: [id])
  developmentId Int         @map("development_id")

  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([competenceId, developmentId])
  @@map("competencies_on_developments")
}

// model Course {
//   id          Int      @id @default(autoincrement())
//   title       String
//   description String
//   imagesPath  String[] @map("images_paths")
//   slug        String   @unique

//   competencies CoursesCompetencies[]
//   employees    EmployeesOnCourses[]

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("courses")
// }

// model EmployeesOnCourses {
//   employee   Employee @relation(fields: [employeeId], references: [id])
//   employeeId Int      @map("employee_id")
//   // course     Course   @relation(fields: [courseId], references: [id])
//   courseId   Int      @map("course_id")

//   assignedAt DateTime @default(now()) @map("assigned_at")

//   @@id([employeeId, courseId])
//   @@map("employees_on_courses")
// }

// model CoursesCompetencies {
//   cource       Course     @relation(fields: [courceId], references: [id])
//   courceId     Int        @map("course_id")
//   competence   Competence @relation(fields: [competenceId], references: [id])
//   competenceId Int        @map("competence_id")

//   assignedAt DateTime @default(now()) @map("assigned_at")

//   @@id([courceId, competenceId])
//   @@map("courses_competencies")
// }
